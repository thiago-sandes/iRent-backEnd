swagger: '2.0'
info:
  description: |
    Documentação do Back-End da aplicaçao iRent, disponível em
    [https://rivanildojr.github.io/documentacaoiRent/)
  version: 1.0.0
  title: iRent-back Documentação

paths:
  /sessions:
    post:
      tags:
      - sessions(autenticação)
      summary: autenticar usuário na aplicação.
      description: isto é feito para autenticar um usuário já cadastrado no sistema
      operationId: autenticaUsuario
      produces:
      - application/json

      parameters:
      - in: body
        name: json
        description: são precisos os seguintes campos no arquivo JSON para fazer a autenticação
        required: true
        schema:
          type: object
          properties:
            username:
              type: string
              example: thiago_sandes
            password:
              type: string
              example: gtx409sd
      responses:
        200:
          description: OK! Serão retornados os seguintes campos em formato json, caso o usuário tenha sido autenticado
          schema:
            type: object
            properties:
              type:
                type: string
                example: bearer
                description: tipo do token. Estamos usando token do tipo "bearer"
              token:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjExLCJpYXQiOjE1NjQwNDgxOTV9.Zy_uiNCBE1Ebc4g5mX5AV9yF-ALz4T648M6PIJZSBiU
                description: sequência de caracteres que representa o token usado para autenticação
              refreshToken:
                type: string
                example: null
                description: token de atualização. Não é muito usado e geralmente vem com valor null
              user_id:
                type: integer
                example: 11
                description: id do usuário autenticado
  /users:
    get:
      tags:
        - users
      summary: retorna todos os usuarios
      operationId: index
      description: rota na qual retorna dos os usuarios cadastrado no banco de dados
      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '500':
          description: Erro interno do servidor
    post:
      tags:
        - users
      summary: realiza cadastro
      operationId: store
      description: rota que retorna criar um usuario no banco de dados
      parameters:
        - name: username
          in: body
          description: username que será atualizado
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Usuário cadastrado
        '500':
          description: Erro interno do servidor
  '/users/username/:username':
    get:
        tags:
          - users
        summary: retorna um usuario
        operationId: show
        description: rota que retorna um usuario
        parameters:
          - name: username
            in: path
            description: username do usuario que será atualizado
            required: true
            type: string
        responses:
          '200':
            description: operação realizada com sucesso
            schema:
              $ref: '#/definitions/User'
          '400':
            description: requisição invalida
          '404':
            description: usuario não encontrado
          '500':
            description: Erro interno do servidor
  '/users/id/:id':
    get:
      tags:
        - users
      summary: retorna um usuario
      operationId: showID
      description: rota que retorna um usuario
      parameters:
        - name: id
          in: path
          description: id do usuario que será atualizado
          required: true
          type: integer
      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            $ref: '#/definitions/User'
        '400':
          description: requisição invalida
        '404':
          description: usuario não encontrado
        '500':
          description: Erro interno do servidor
  '/users/:username':
    put:
      tags:
        - users
      summary: atualiza o usuario
      operationId: update
      description: rota que atualiza os dados do usuario
      parameters:
        - name: username
          in: path
          description: username do usuario que será atualizado
          required: true
          type: string
        - in: body
          name: json
          description: quaisquer dos seguintes campos no arquivo JSON pode ser usado para ser atualizados
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            $ref: '#/definitions/User'
        '400':
          description: requisição invalida
        '401':
          description: Não autorizado
        '404':
          description: Usuario não encontrado
        '500':
          description: Erro interno do servidor
    delete:
      tags:
        - users
      summary: remove o usuario
      operationId: destroy
      description: rota que remove os dados do usuario
      parameters:
        - name: username
          in: path
          description: username do usuario que será removido
          required: true
          type: string
      responses:
        '200':
          description: Usuário removido
        '404':
          description: usuario não encontrado
        '500':
          description: Erro interno do servido

  /oferta:
    get:
      tags:
        - oferta
      summary: retorna todos as ofertas
      operationId: indexOferta
      description: rota na qual retorna dos as ofertas cadastrada no banco de dados
      produces:
        - application/json
      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            type: array
            items:
              $ref: '#/definitions/Oferta'
        '500':
          description: Erro interno do servidor
    post:
      tags:
        - oferta
      summary: realiza cadastro da oferta
      operationId: storeOferta
      description: rota que criar uma oferta no banco de dados
      produces:
        - application/json
      parameters:
        - in: body
          name: json
          description: são precisos os seguintes campos no arquivo JSON para criar a oferta
          schema:
            $ref: '#/definitions/Oferta'
      responses:
        '200':
          description: Oferta cadastrado
        '500':
          description: Erro interno do servidor
  '/oferta/:id':
    get:
      tags:
        - oferta
      summary: retorna uma oferta
      operationId: showOferta
      description: rota que retorna uma oferta com o id passado
      parameters:
        - name: id
          in: path
          description: id da oferta que será atualizada
          required: true
          type: integer
      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            $ref: '#/definitions/Oferta'
        '400':
          description: requisição invalida
        '404':
          description: oferta não encontrada
        '500':
          description: Erro interno do servidor
    put:
      tags:
        - oferta
      summary: atualiza a oferta
      operationId: updateOferta
      description: rota que atualiza os dados da oferta
      parameters:
        - name: id
          in: path
          description: id da oferta que será atualizada
          required: true
          type: integer
        - in: body
          name: json
          description: quaisquer dos seguintes campos no arquivo JSON pode ser usado para ser atualizados
          schema:
            $ref: '#/definitions/Oferta'
      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            $ref: '#/definitions/Oferta'
        '400':
          description: requisição invalida
        '401':
          description: Não autorizado
        '404':
          description: oferta não encontrada
        '500':
          description: Erro interno do servidor
    delete:
      tags:
        - oferta
      summary: remove a oferta
      operationId: destroyOferta
      description: rota que remove os dados da oferta
      parameters:
        - name: id
          in: path
          description: id da oferta que será removida
          required: true
          type: integer
      responses:
        '200':
          description: Oferta removida
        '404':
          description: Oferta não encontrada
        '500':
          description: Erro interno do servido
  '/oferta/:id/user':
    get:
      tags:
        - oferta
      summary: retorna todas as ofertas do usuario
      operationId: getIdOfertas
      description: rota que retorna todas oferta com o id do usuario passado
      parameters:
        - name: id
          in: path
          description: id do usuario que será exibido as ofertas
          required: true
          type: integer
      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            $ref: '#/definitions/Oferta'
        '400':
          description: requisição invalida
        '404':
          description: oferta não encontrada
        '500':
          description: Erro interno do servidor

  /anuncio:
    get:
      tags:
        - anuncio
      summary: retorna todos os anuncios
      operationId: indexAnuncios
      description: rota na qual retorna dos os anuncios cadastrado no banco de dados
      produces:
        - application/json
      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            type: array
            items:
              $ref: '#/definitions/Anuncio'
        '500':
          description: Erro interno do servidor
    post:
      tags:
        - anuncio
      summary: realiza cadastro do anuncio
      operationId: storeAnuncio
      description: rota que criar um anuncio no banco de dados
      produces:
        - application/json
      parameters:
        - in: body
          name: json
          description: são precisos os seguintes campos no arquivo JSON para criar o anuncio
          schema:
            $ref: '#/definitions/Anuncio'
      responses:
        '200':
          description: Anuncio cadastrado
        '500':
          description: Erro interno do servidor
  '/anuncio/:id':
    get:
      tags:
        - anuncio
      summary: retorna um anuncio
      operationId: showAnuncio
      description: rota que retorna um anuncio com o id passado
      parameters:
        - name: id
          in: path
          description: id do anuncio que será retornado
          required: true
          type: integer
      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            $ref: '#/definitions/Anuncio'
        '400':
          description: requisição invalida
        '404':
          description: Anuncio não encontrado
        '500':
          description: Erro interno do servidor
    put:
      tags:
        - anuncio
      summary: atualiza o anuncio
      operationId: updateAnuncio
      description: rota que atualiza os dados do anuncio
      parameters:
        - name: id
          in: path
          description: id do anuncio que será atualizado
          required: true
          type: integer
        - in: body
          name: json
          description: quaisquer dos seguintes campos no arquivo JSON pode ser usado para ser atualizados
          schema:
            $ref: '#/definitions/Anuncio'
      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            $ref: '#/definitions/Anuncio'
        '400':
          description: requisição invalida
        '401':
          description: Não autorizado
        '404':
          description: Anuncio não encontrado
        '500':
          description: Erro interno do servidor
    delete:
      tags:
        - anuncio
      summary: remove o anuncio
      operationId: destroyAnuncio
      description: rota que remove os dados do anuncio
      parameters:
        - name: id
          in: path
          description: id do anuncio que será removido
          required: true
          type: integer
      responses:
        '200':
          description: Anuncio removido
        '404':
          description: Anuncio não encontrado
        '500':
          description: Erro interno do servido

  '/anuncio/:id/user':
    get:
      tags:
        - anuncio
      summary: retorna todas os anuncios
      operationId: getIdAnuncios
      description: rota que retorna todos anuncios com o id do usuario passado
      parameters:
        - name: id
          in: path
          description: id do usuario que será exibido os anuncios
          required: true
          type: integer
      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            $ref: '#/definitions/Anuncio'
        '400':
          description: requisição invalida
        '404':
          description: Anuncio não encontrado
        '500':
          description: Erro interno do servidor

  /avaliacaoOfertas:
    post:
      tags:
      - avaliacaoOfertas
      summary: criar nova avaliação de oferta
      description: rota que adiciona uma nova avaliação a uma oferta
      operationId: createAvaliacaoOfertas
      produces:
      - application/json

      parameters:
      - in: body
        name: json
        description: são precisos os seguintes campos no arquivo JSON para fazer a avaliação de uma oferta
        required: true
        schema:
          type: object
          properties:
            oferta_id:
              type: integer
              example: 1
            user_id:
              type: integer
              example: 3
            nota:
              type: integer
              example: 4
      responses:
        201:
          description: OK! Serão retornados os seguintes campos em formato JSON, caso a avaliação tenha sido registrada
          schema:
            type: object
            properties:
              message:
                type: string
                description: Avaliação realizada!  esse deverá ser o conteúdo do campo "message" do JSON de resposta caso a avaliação tenha sido realizada
                example: Avaliação realizada!

        409:
          description: Conflict! Já existe uma avaliação para esse usuário em determinada oferta. Se quiser atualizar, use o método para atualizar em vez desse
          schema:
            type: object
            properties:
              message:
                type: string
                description: Avaliação já realizada! esse deverá ser o conteúdo do campo "message" do JSON de resposta caso a avaliação não tenha sido realizada
                example: Avaliação já realizada!

    get:
      tags:
        - avaliacaoOfertas
      summary: retorna todas as avaliações de ofertas existentes
      operationId: getAllAvaliacaoOferta
      description: rota que retorna todas as avaliações de ofertas armazenadas
      responses:
        200:
          description: OK! Retornou todas as avaliações em formato JSON
          schema:
            $ref: '#/definitions/AvaliacaoOferta'
  '/avaliacaoOfertas/:user_id/:oferta_id':
    get:
      tags:
        - avaliacaoOfertas
      summary: retorna uma avaliação específica
      operationId: getAvaliacaoOferta
      description: rota que retorna uma avaliação de oferta, se existir, dados o id do usuário e o id da oferta
      responses:
        200:
          description: OK! Retornou a avaliação em formato JSON. Caso não exista a avaliação, o retorno será um JSON vazio { [] } !
          schema:
            $ref: '#/definitions/AvaliacaoOferta'
  '/avaliacaoOfertas/:oferta_id':
    get:
      tags:
        - avaliacaoOfertas
      summary: retorna média de avaliações de uma dada oferta
      operationId: mediaAvaliacaoOferta
      description: rota que retorna a média das avaliações de uma oferta através de seu id
      parameters:
        - name: oferta_id
          in: path
          description: id da oferta que se deseja obter média de avaliações
          required: true
          type: string
      responses:
        200:
          description: média retornada com sucesso
          schema:
            type: object
            properties:
              avg:
                type: number
                description:  4.0000000000000000 é um exemplo de retorno válido para o campo "avg", com média de avaliações igual a 4
                example: "4.0000000000000000"

    delete:
      tags:
        - avaliacaoOfertas
      summary: deleta avaliação pelo seu id
      operationId: deleteAvaliacaoOferta
      description: rota que deleta uma avaliação de oferta pelo id da avaliacaoOferta
      responses:
        200:
          description: OK! Avaliação deletada com sucesso
          schema:
            type: object
            properties:
              message:
                type: string
                description: Caso a avaliação seja deletada, deve retornar "Avaliação de oferta removida"
                example: "Avaliação de oferta removida"

        404:
          description: NOT FOUND! Avaliação não encontrada
          schema:
            type: object
            properties:
              message:
                type: string
                description: Campo deve vir vazio caso avaliacaoOferta não seja encontrada
                example: "{}"

  '/avaliacaoOfertas/:id':
    put:
      tags:
        - avaliacaoOfertas
      summary: atualiza a avaliação de uma oferta
      operationId: atualizaAvaliacaoOferta
      description: rota que atualiza uma avaliação pelo seu id
      parameters:
        - name: id
          in: path
          description: id da avaliação
          required: true
          type: integer


        - name: json
          in: body
          description: é preciso enviar o seguinte campo no arquivo JSON para fazer a atualização de uma avaliação
          required: true
          schema:
            type: object
            properties:
              nota:
                type: integer
                example: 4

      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            $ref: '#/definitions/AvaliacaoOferta'

  /avaliacaoAnuncios:
    post:
      tags:
      - avaliacaoAnuncios
      summary: criar nova avaliação de anúncio
      description: rota que adiciona uma nova avaliação a um anúncio
      operationId: createAvaliacaoAnuncios
      produces:
      - application/json

      parameters:
      - in: body
        name: json
        description: são precisos os seguintes campos no arquivo JSON para fazer a avaliação de um anúncio
        required: true
        schema:
          type: object
          properties:
            anuncio_id:
              type: integer
              example: 1
            user_id:
              type: integer
              example: 3
            nota:
              type: integer
              example: 4
      responses:
        201:
          description: OK! Serão retornados os seguintes campos em formato JSON, caso a avaliação tenha sido registrada
          schema:
            type: object
            properties:
              message:
                type: string
                description: Avaliação realizada!  esse deverá ser o conteúdo do campo "message" do JSON de resposta caso a avaliação tenha sido realizada
                example: Avaliação realizada!

        409:
          description: Conflict! Já existe uma avaliação para esse usuário em determinado anúncio. Se quiser atualizar, use o método para atualizar em vez desse
          schema:
            type: object
            properties:
              message:
                type: string
                description: Avaliação já realizada! esse deverá ser o conteúdo do campo "message" do JSON de resposta caso a avaliação não tenha sido realizada
                example: Avaliação já realizada!

    get:
      tags:
        - avaliacaoAnuncios
      summary: retorna todas as avaliações de anúncios existentes
      operationId: getAllAvaliacaoAnuncio
      description: rota que retorna todas as avaliações de anúncios armazenadas
      responses:
        200:
          description: OK! Retornou todas as avaliações em formato JSON
          schema:
            $ref: '#/definitions/AvaliacaoAnuncio'
  '/avaliacaoAnuncios/:user_id/:anuncio_id':
    get:
      tags:
        - avaliacaoAnuncios
      summary: retorna uma avaliação específica
      operationId: getAvaliacaoAnuncio
      description: rota que retorna uma avaliação de anúncio, se existir, dados o id do usuário e o id do anúncio
      responses:
        200:
          description: OK! Retornou a avaliação em formato JSON. Caso não exista a avaliação, o retorno será um JSON vazio { [] } !
          schema:
            $ref: '#/definitions/AvaliacaoAnuncio'
  '/avaliacaoAnuncios/:anuncio_id':
    get:
      tags:
        - avaliacaoAnuncios
      summary: retorna média de avaliações de um dado anúncio
      operationId: mediaAvaliacaoAnuncio
      description: rota que retorna a média das avaliações de um anúncio através de seu id
      parameters:
        - name: anuncio_id
          in: path
          description: id do anúncio que se deseja obter média de avaliações
          required: true
          type: string
      responses:
        200:
          description: média retornada com sucesso
          schema:
            type: object
            properties:
              avg:
                type: number
                description:  4.0000000000000000 é um exemplo de retorno válido para o campo "avg", com média de avaliações igual a 4
                example: " 4.0000000000000000"

    delete:
      tags:
        - avaliacaoAnuncios
      summary: deleta avaliação pelo seu id
      operationId: deleteAvaliacaoAnuncio
      description: rota que deleta uma avaliação de anúncio pelo id da avaliacaoAnuncio
      responses:
        200:
          description: OK! Avaliação deletada com sucesso
          schema:
            type: object
            properties:
              message:
                type: string
                description: Caso a avaliação seja deletada, deve retornar "Avaliação de anúncio removida"
                example: "Avaliação de anúncio removida"

        404:
          description: NOT FOUND! Avaliação não encontrada
          schema:
            type: object
            properties:
              message:
                type: string
                description: Campo deve vir vazio caso avaliacaoAnuncio não seja encontrada
                example: "{}"

  '/avaliacaoAnuncios/:id':
    put:
      tags:
        - avaliacaoAnuncios
      summary: atualiza a avaliação de um anúncio
      operationId: atualizaAvaliacaoAnuncio
      description: rota que atualiza uma avaliação pelo seu id
      parameters:
        - name: id
          in: path
          description: id da avaliação
          required: true
          type: integer
        - name: json
          in: body
          description: é preciso enviar o seguinte campo no arquivo JSON para fazer a atualização de uma avaliação
          required: true
          schema:
            type: object
            properties:
              nota:
                type: integer
                example: 4

      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            $ref: '#/definitions/AvaliacaoAnuncio'

  /endereco:
    post:
      tags:
      - enderecoOferta
      summary: criar novo endereço de oferta
      description: rota que adiciona um novo endereço a uma oferta
      operationId: createEndereco
      produces:
      - application/json

      parameters:
      - in: body
        name: json
        description: são precisos os seguintes campos no arquivo JSON para adicionar endereço a uma oferta
        required: true
        schema:
          type: object
          properties:
            oferta_id:
              type: integer
              description: id da oferta cujo endereço pertence
              example: 12
            latitude:
              type: number
              description: latitude do endereço
              example: 41.40338
            longitude:
              type: number
              description: longitude do endereço
              example: 2.17403
            tipoEndereco:
              type: string
              description: tipo do endereço(casa, apartamento, avenida, rua...)
              example: "casa"
            descricao:
              type: string
              description: descrição do endereço
              example: "Rua Grujim, 356 - Rosa Elze, SE"
      responses:
        201:
          description: OK! Serão retornados os seguintes campos em formato JSON, caso o endereço tenha sido registrado
          schema:
            type: object
            properties:
              message:
                type: string
                description: Endereço cadastrado!  esse deverá ser o conteúdo do campo "message" do JSON de resposta caso o endereço tenha sido cadastrado
                example: Endereço cadastrado!

        409:
          description: Conflict! Já existe um endereço para essa oferta. Se quiser atualizar, use o método para atualizar em vez desse
          schema:
            type: object
            properties:
              message:
                type: string
                description: Endereço já cadastrado! esse deverá ser o conteúdo do campo "message" do JSON de resposta caso o endereço já tenha sido cadastrado para determinada oferta
                example: Endereço já cadastrado!

    get:
      tags:
        - enderecoOferta
      summary: retorna todos os endereços de ofertas existentes
      operationId: getAllEnderecoOferta
      description: rota que retorna todos os endereços de ofertas cadastrados
      responses:
        200:
          description: OK! Retornou todos os endereços em formato JSON
          schema:
            $ref: '#/definitions/Endereco'
  '/endereco/:oferta_id':
    get:
      tags:
        - enderecoOferta
      summary: retorna um endereço pelo id da oferta
      operationId: getEnderecoOferta
      description: rota que retorna um endereço de oferta, se existir, dado o id da oferta
      responses:
        200:
          description: OK! Retornou o endereço da oferta em formato JSON. Caso não exista o endereço, o retorno será um JSON vazio { [] } !
          schema:
            $ref: '#/definitions/Endereco'
  '/endereco/:id':
    get:
      tags:
        - enderecoOferta
      summary: retorna endereço pelo seu id
      operationId: getEndereco
      description: rota que retorna o endereço de uma oferta através do id do endereço
      responses:
        200:
          description: OK! Retornou a avaliação em formato JSON. Caso não exista a avaliação, o retorno será um JSON vazio { [] } !
          schema:
            $ref: '#/definitions/Endereco'

    delete:
      tags:
        - enderecoOferta
      summary: deleta endereço pelo seu id
      operationId: deleteEnderecoOferta
      description: rota que deleta um endereço de oferta pelo id do endereço
      responses:
        200:
          description: OK! Endereço deletado com sucesso
          schema:
            type: object
            properties:
              message:
                type: string
                description: Caso o endereço seja deletado, deve retornar "Endereço de oferta removido"
                example: "Endereço de oferta removido"

        404:
          description: NOT FOUND! Endereço não encontrado
          schema:
            type: object
            properties:
              message:
                type: string
                description: Campo deve vir vazio caso o endereço não seja encontrado
                example: "{}"

    put:
      tags:
        - enderecoOferta
      summary: atualiza o endereco de uma oferta
      operationId: atualizaEnderecoOferta
      description: rota que atualiza um endereço pelo seu id
      parameters:
        - name: id
          in: path
          description: id do endereço
          required: true
          type: integer


        - name: json
          in: body
          description: é preciso enviar o seguinte campo no arquivo JSON para fazer a atualização de um endereço
          required: true
          schema:
            type: object
            properties:
              latitude:
                type: number
                description: latitude do endereço
                example: 41.40338
              longitude:
                type: number
                description: longitude do endereço
                example: 2.17403
              tipoEndereco:
                type: string
                description: tipo do endereço(casa, apartamento, avenida, rua...)
                example: "casa"
              descricao:
                type: string
                description: descrição do endereço
                example: "Rua Grujim, 356 - Rosa Elze, SE"

      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            $ref: '#/definitions/Endereco'
  
  /interesse:
    get:
      tags:
        - interesse
      summary: retorna todos os interesse
      operationId: indexInteresse
      description: rota na qual retorna dos os interesse cadastrado no banco de dados
      produces:
        - application/json
      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            type: array
            items:
              $ref: '#/definitions/Notificacao'
        '500':
          description: Erro interno do servidor
    post:
      tags:
        - interesse
      summary: realiza cadastro da notificacao
      operationId: storeInteresse
      description: rota que criar um interesse no banco de dados
      produces:
        - application/json
      parameters:
        - in: body
          name: json
          description: são precisos os seguintes campos no arquivo JSON para criar o interesse
          schema:
            $ref: '#/definitions/Notificacao'
      responses:
        '201':
          description: Interesse Realizado
        '403':
          description: Interesse Já Cadastrado
        '500':
          description: Erro interno do servidor
  '/interesse/:id':
    get:
      tags:
        - interesse
      summary: retorna um interesse
      operationId: showInteresse
      description: rota que retorna um interesse com o id passado
      parameters:
        - name: id
          in: path
          description: id do interesse que será retornado
          required: true
          type: integer
      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            $ref: '#/definitions/Notificacao'
        '400':
          description: requisição invalida
        '404':
          description: Interesse não encontrado
        '500':
          description: Erro interno do servidor
          
    delete:
      tags:
        - interesse
      summary: remove o interesse
      operationId: destroyAInteresse
      description: rota que remove os dados do interesse
      parameters:
        - name: id
          in: path
          description: id do interesse que será removido
          required: true
          type: integer
      responses:
        '200':
          description: Interesse removido
        '404':
          description: Interesse não encontrado
        '500':
          description: Erro interno do servido

  '/interesse/:idUser/user':
    get:
      tags:
        - interesse
      summary: retorna todas os interesse do usuario
      operationId: getInteresse
      description: rota que retorna todos anuncios com o id do usuario passado
      parameters:
        - name: idUser
          in: path
          description: id do usuario que será exibido os anuncios
          required: true
          type: integer
      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            $ref: '#/definitions/User'
        '400':
          description: requisição invalida
        '404':
          description: Interesse não encontrado
        '500':
          description: Erro interno do servidor
  
  '/interesse/:idUser/user/:idOferta/oferta':
    get:
      tags:
        - interesse
      summary: retorna todas os interesse do usuario e da oferta
      operationId: getInteresseOferta
      description: rota que retorna todos os interesses da oferta passada do usuario passado
      parameters:
        - name: idUser
          in: path
          description: id do usuario que será exibido os interesse
          required: true
          type: integer
        - name: idOferta
          in: path
          description: id da oferta que será exibido os anuncios
          required: true
          type: integer
      responses:
        '200':
          description: operação realizada com sucesso
          schema:
            $ref: '#/definitions/User'
        '400':
          description: requisição invalida
        '404':
          description: Interesse não encontrado
        '500':
          description: Erro interno do servidor

definitions:
  User:
    type: object
    properties:
      username:
        type: string
        description: nome do usuario no sistema
        example: jmarcos
      name:
        type: string
        description: nome do usuario
        example: João Marcos
      email:
        type: string
        description: email do usuario do sistema
        example: jmarcos@gmail.com
      password:
        type: string
        description: senha de login do usuario sistema
        example: 12345678
      telephone:
        type: string
        description: numero de telefone do usuario
        example: 79999995555
      sex:
        type: string
        description: sexo do usuario
        example: M
      path:
        type: string
        description: caminho da imagem do usuario
    required:
      - username
      - name
      - email
      - password
      - telephone
      - sex

  Oferta:
    type: object
    properties:
      id:
        type: integer
        description: id da oferta
      user_id:
        type: integer
        description: id do usuario que está criando a oferta
        example: 12
      endereco_id:
        type: integer
        description: id do endereço da oferta criado
        example: 10
      titulo:
        type: string
        description: titulo da oferta
        example: Apartamento proximo a UFS
      telefone:
        type: string
        description: telefone de contato do ofertante
        example: 79 996969696
      descricao:
        type: string
        description: descrição da oferta
        example: o apartamento vem com moveis basicos...
      preco:
        type: number
        description: preço da oferta
        example: 200,00
      restricao:
        type: array
        items:
          type: string
          description: descrição da oferta
          example: o apartamento vem com moveis basicos...
    required:
      - user_id
      - endereco_id
      - titulo
      - telefone
      - descricao
      - preco

  Anuncio:
    type: object
    properties:
      id:
        type: integer
        description: id do anuncio
      user_id:
        type: integer
        description: id do usuario que está criando a oferta
        example: 10
      titulo:
        type: string
        description: titulo da oferta
        example: Apartamento proximo a UFS
      descricao:
        type: string
        description: descrição da oferta
        example: o apartamento vem com moveis basicos...
      preferencia:
        type: string
        description: preço da oferta
        example: casa proximo ao restaurante
      qtdCurtidas:
        type: integer
        description: quantidade de curtidas do anuncio
        example: 100
    required:
      - user_id
      - titulo
      - descricao
      - preferencia
      - qtdCurtidas

  AvaliacaoOferta:
    type: object
    properties:
      id:
        type: integer
        description: id da avaliação
        example: 21
      oferta_id:
        type: integer
        description: id da oferta cuja avaliação pertence
        example: 12
      user_id:
        type: integer
        description: id do usuário cuja avaliação pertence
        example: 44
      nota:
        type: integer
        description: nota da avaliação(de 0 à 5 no formato estrela)
        example: 4
      created_at:
        type: object
        description: \"timestamp:" informe de quando a avaliação foi criada
        example: "2019-06-17 21:17:36-03"
      updated_at:
        type: object
        description: \"timestamp:" informe de quando a avaliação foi alterada
        example: "2019-06-25 21:00:09-03"
    required:
      - id
      - oferta_id
      - user_id
      - nota

  AvaliacaoAnuncio:
    type: object
    properties:
      id:
        type: integer
        description: id da avaliação
        example: 21
      anuncio_id:
        type: integer
        description: id do anúncio cuja avaliação pertence
        example: 12
      user_id:
        type: integer
        description: id do usuário cuja avaliação pertence
        example: 44
      nota:
        type: integer
        description: nota da avaliação(de 0 à 5 no formato estrela)
        example: 4
      created_at:
        type: object
        description: \"timestamp:" informe de quando a avaliação foi criada
        example: "2019-06-17 21:17:36-03"
      updated_at:
        type: object
        description: \"timestamp:" informe de quando a avaliação foi alterada
        example: "2019-06-25 21:00:09-03"
    required:
      - id
      - anuncio_id
      - user_id
      - nota

  Endereco:
    type: object
    properties:
      id:
        type: integer
        description: id do endereço
        example: 21
      oferta_id:
        type: integer
        description: id da oferta cujo endereço pertence
        example: 12
      latitude:
        type: number
        description: latitude do endereço
        example: 41.40338
      longitude:
        type: number
        description: longitude do endereço
        example: 2.17403
      tipoEndereco:
        type: string
        description: tipo do endereço(casa, apartamento, avenida, rua...)
        example: "casa"
      descricao:
        type: string
        description: descrição do endereço
        example: "Rua Grujim, 356 - Rosa Elze, SE"
      created_at:
        type: object
        description: \"timestamp:" informe de quando a avaliação foi criada
        example: "2019-06-17 21:17:36-03"
      updated_at:
        type: object
        description: \"timestamp:" informe de quando a avaliação foi alterada
        example: "2019-06-25 21:00:09-03"
    required:
      - id
      - oferta_id
      - latitude
      - longitude
  
  Notificacao:
    type: object
    properties:
      id:
        type: integer
        description: id da notificacao
        example: 1
      user_id:
        type: integer
        description: id do usuario que está interessado na oferta
        example: 10
      oferta_id:
        type: integer
        description: id da oferta que teve um oferta
        example: 4

schemes:
 - https
 - http
